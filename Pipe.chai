class Pipe {
	var x
	var y
	var scored
	var width
	var height
	var img
	var top
	var openingHeight
	var opening
	var sourcequad

	def serialize() {
		return [
			"opening": this.opening,
			"x": this.x,
			"y": this.y,
			"scored": this.scored,
			"width": this.width,
			"height": this.height,
			"top": this.top,
			"openingHeight": this.openingHeight,
			"quadx": this.sourcequad.x,
			"quady": this.sourcequad.y,
			"quadwidth": this.sourcequad.width,
			"quadheight": this.sourcequad.height
		]
	}
	def deserialize(obj) {
		this.x = obj["x"]
		this.y = obj["y"]
		this.opening = obj["opening"]
		this.scored = obj["scored"]
		this.width = obj["width"]
		this.height = obj["height"]
		this.top = obj["top"]
		this.openingHeight = obj["openingHeight"]
		this.sourcequad.x = obj["quadx"]
		this.sourcequad.y = obj["quady"]
		this.sourcequad.width = obj["quadwidth"]
		this.sourcequad.height = obj["quadheight"]
		if (this.top) {
			this.img := assets["pipe-top"]
		}
		else {
			this.img := assets["pipe-bottom"]
		}
		return this
	}

	def Pipe(opening, top, openingHeight) {
		this.scored = false
		this.opening = opening
		this.openingHeight = openingHeight
		// Make sure the position is of floating point.
		this.x = graphics.getWidth() * 1.0f
		this.top = top
		this.sourcequad = Quad()

		if (top) {
			this.y = 0
			this.height = opening - this.openingHeight
			this.img := assets["pipe-top"]
			this.width = this.img.getWidth()
			this.sourcequad.x = 0
			this.sourcequad.y = this.img.getHeight() - this.height
			this.sourcequad.width = this.img.getWidth()
			this.sourcequad.height = this.height
		}
		else {
			this.y = opening + this.openingHeight
			this.height = landTop - this.y
			this.img := assets["pipe-bottom"]
			this.width = this.img.getWidth()
			this.sourcequad.x = 0
			this.sourcequad.y = 0
			this.sourcequad.width = this.img.getWidth()
			this.sourcequad.height = this.height
		}
	}

	def draw() {
		graphics.draw(this.img, this.sourcequad, this.x, this.y)
	}

	def update(delta, speed) {
		this.x -= delta * speed
		if (this.x + this.width < 0) {
			return false
		}
		return true
	}

	def collide(bird) {
		if (this.x < bird.x + bird.width) {
			if (this.x + this.width > bird.x) {
				if (this.y < bird.y + bird.height) {
					if (this.y + this.height > bird.y) {
						return true
					}
				}
			}
		}
		return false
	}
}
