global bird
global assets
global pipes = []
global pipetimer = 0.0f
global pipetimerCountdown = 1.4f
global score = 0
global openingSizeStart = 60.0f
global openingSize = openingSizeStart
global openingSizeRangeStart = 10.0f
global openingSizeRange = openingSizeRangeStart
global flapTimer = 0.0f
global flapTimerMax = 0.10f
global landTop = 0
global landX = 0.0f
global skyX = 0.0f
global highscore = 0
global currentState = "menu"
global states

/**
 * Configuration for ChaiLove.
 */
def conf(t) {
	t.window.title = "Floppy Bird";
	t.window.width = 480;
	t.window.height = 480;
}

/**
 * Load all the game assets and files.
 */
def load() {
	// Set up the background.
	graphics.setBackgroundColor(78, 192, 202)

	// Load all asset files.
	filesystem.load("assets.chai")
	filesystem.load("Bird.chai")
	filesystem.load("Pipe.chai")

	// Construct the assets.
	bird = Bird()
	landTop = graphics.getHeight() - assets["land"].getHeight()

	// Set up the Game States
	filesystem.load("MainMenuState.chai")
	filesystem.load("GameState.chai")
	states = [
		"menu": MainMenuState(),
		"game": GameState()
	]

	// Bring all the game entities to ground zero.
	reset()
}

/**
 * Bring all entites to ground zero.
 */
def reset() {
	pipes.clear()
	addPipe()
	bird.reset()
	score = 0
	openingSize = openingSizeStart
	openingSizeRange = openingSizeRangeStart
	pipetimer = 0.0f
	flapTimer = 0.0f
	landX = 0.0f
}

/**
 * Add a pipe to the pipe queue.
 */
def addPipe() {
	// Find out where the pipes should be positioned.
	var pipeTubeSize = 26
	var opening = math.random(pipeTubeSize + openingSize, landTop - pipeTubeSize - openingSize)
	var openSize = openingSize + math.random(-openingSizeRange, openingSizeRange)

	// Add the pipes to the game.
	pipes.push_back(Pipe(opening, true, openSize))
	pipes.push_back(Pipe(opening, false, openSize))
}

/**
 * Draw all entities on the screen.
 */
def draw() {
	// Draw the background (land and sky).
	var land := assets["land"]
	for (var i = 0; (i - 1) * land.getWidth() <= graphics.getWidth(); ++i) {
		graphics.draw(land, i * land.getWidth() - landX, graphics.getHeight() - land.getHeight())
	}
	if (config.options["highquality"]) {
		var sky := assets["sky"]
		for (var i = 0; (i - 1) * sky.getWidth() <= graphics.getWidth(); ++i) {
			graphics.draw(sky, i * sky.getWidth() - skyX, landTop - sky.getHeight())
		}
	}

	// Draw the Bird
	bird.draw()

	// Draw all the pipes
	for (pipe : pipes) {
		pipe.draw()
	}

	// Draw the current game state.
	states[currentState].draw()

	// Print the score.
	if (score > 0) {
		graphics.setFont(assets["font-big"])
		var scoretext = to_string(score)
		var scorewidth = assets["font-big"].getWidth(scoretext)
		graphics.print(to_string(score), graphics.getWidth() / 2 - scorewidth / 2, 30)
	}

	// FPS
	graphics.setFont(assets["font-pixel"])
	graphics.print("FPS " + to_string(timer.getFPS()), 10, graphics.getHeight() - 20)

	// Highscore
	graphics.print("BEST " + to_string(highscore), graphics.getWidth() - 150, graphics.getHeight() - 20)
}

/**
 * Callback; Update the game.
 */
def update(delta) {
	states[currentState].update(delta)
}

/**
 * Callback; Called when a joystick button is hit.
 */
def joystickpressed(joy, button) {
	states[currentState].joystickpressed()
}

/**
 * Callback; Called when a mouse button is tapped.
 */
def mousepressed(x, y, button) {
	joystickpressed(0, 0)
}

/**
 * Adds a point to the score.
 */
def addScore() {
	score += 1
	assets["point"].play()

	// Update the highscore.
	if (score > highscore) {
		highscore = score
	}
}

/**
 * Callback; Save the current state as a JSON string.
 */
def savestate() {
	var pipeInfo = []
	for (pipe : pipes) {
		pipeInfo.push_back(pipe.serialize())
	}
	var info = [
		"score": score,
		"highscore": highscore,
		"bird": bird.serialize(),
		"currentState": currentState,
		"pipes": pipeInfo,
		"openingSize": openingSize,
		"openingSizeRange": openingSizeRange,
		"pipetimer": pipetimer,
		"flapTimer": flapTimer,
		"landX": landX,
		"skyX": skyX
	]
	return to_json(info)
}

/**
 * Callback; Load the state from the given JSON string.
 */
def loadstate(data) {
	var info = from_json(data)
	highscore = info["highscore"]
	bird.deserialize(info["bird"])
	currentState = info["currentState"]
	score = info["score"]
	pipes.clear()
	for (pipe : info["pipes"]) {
		pipes.push_back(Pipe(100, pipe["top"], 100).deserialize(pipe))
	}
	openingSize = info["openingSize"]
	openingSizeRange = info["openingSizeRange"]
	pipetimer = info["pipetimer"]
	flapTimer = info["flapTimer"]
	landX = info["landX"]
	skyX = info["skyX"]

	return true
}
