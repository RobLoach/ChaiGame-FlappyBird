global bird
global assets
global pipes = List()
global pipetimer = 0.0f
global pipetimerCountdown = 1.4f
global score = 0
global openingSizeStart = 60.0f
global openingSize = openingSizeStart
global openingSizeRangeStart = 10.0f
global openingSizeRange = openingSizeRangeStart
global flapTimer = 0.0f
global flapTimerMax = 0.10f
global landTop = 0
global landX = 0.0f
global skyX = 0.0f
global highscore = 0
global states
global cheatNoClip = false
global cheatFly = false

/**
 * Configuration for ChaiLove.
 */
def conf(t) {
	t.identity = "floppybird"
	t.version = "0.24.0" // Version of ChaiLove
	t.window.title = "Floppy Bird";
	t.window.width = 480;
	t.window.height = 480;
}

/**
 * Load all the game assets and files.
 */
def load() {
	// Set up the State Manager.
	love.filesystem.load("lib/StateMachine.chai")
	states = StateMachine()

	// Set up the background.
	love.graphics.setBackgroundColor(78, 192, 202)

	// Make filtering use the nearest.
	love.graphics.setDefaultFilter("nearest")

	// Load all asset files.
	love.filesystem.load("assets.chai")
	love.filesystem.load("Bird.chai")
	love.filesystem.load("Pipe.chai")

	// Construct the assets.
	bird = Bird()
	landTop = love.graphics.getHeight() - assets["land"].getHeight()

	// Set up the Game States
	love.filesystem.load("MainMenuState.chai")
	love.filesystem.load("GameState.chai")
	states.add("menu", MainMenuState())
	states.add("game", GameState())
	states.set("menu")

	// Bring all the game entities to ground zero.
	reset()
}

/**
 * Callback; Reset all entities and content.
 */
def reset() {
	pipes.clear()
	addPipe()
	bird.reset()
	score = 0
	openingSize = openingSizeStart
	openingSizeRange = openingSizeRangeStart
	pipetimer = 0.0f
	flapTimer = 0.0f
	landX = 0.0f
}

/**
 * Add a pipe to the pipe queue.
 */
def addPipe() {
	// Find out where the pipes should be positioned.
	var pipeTubeSize = 26
	var opening = love.math.random(pipeTubeSize + openingSize, landTop - pipeTubeSize - openingSize)
	var openSize = openingSize + love.math.random(-openingSizeRange, openingSizeRange)

	// Add the pipes to the game.
	pipes.push_back(Pipe(opening, true, openSize))
	pipes.push_back(Pipe(opening, false, openSize))
}

/**
 * Draw all entities on the screen.
 */
def draw() {
	// Draw the background (land and sky).
	var land := assets["land"]
	for (var i = 0; (i - 1) * land.getWidth() <= love.graphics.getWidth(); ++i) {
		love.graphics.draw(land, i * land.getWidth() - landX, love.graphics.getHeight() - land.getHeight())
	}
	if (love.config.options["highquality"]) {
		var sky := assets["sky"]
		for (var i = 0; (i - 1) * sky.getWidth() <= love.graphics.getWidth(); ++i) {
			love.graphics.draw(sky, i * sky.getWidth() - skyX, landTop - sky.getHeight())
		}
	}

	// Draw the Bird
	bird.draw()

	// Draw all the pipes
	for (pipe : pipes) {
		pipe.draw()
	}

	// Draw the current game state.
	states.draw()

	// Print the score.
	if (score > 0) {
		love.graphics.setFont(assets["font-big"])
		var scoretext = to_string(score)
		var scorewidth = assets["font-big"].getWidth(scoretext)
		love.graphics.print(to_string(score), love.graphics.getWidth() / 2 - scorewidth / 2, 30)
	}

	// FPS
	love.graphics.setFont(assets["font-pixel"])
	love.graphics.print("FPS " + to_string(love.timer.getFPS()), 10, love.graphics.getHeight() - 20)

	// Highscore
	love.graphics.print("BEST " + to_string(highscore), love.graphics.getWidth() - 150, love.graphics.getHeight() - 20)
}

/**
 * Callback; Update the game.
 */
def update(delta) {
	states.update(delta)
}

/**
 * Callback; Called when a joystick button is hit.
 */
def joystickpressed(joy, button) {
	states.joystickpressed(button)
}

/**
 * Callback; Called when a mouse button is tapped.
 */
def mousepressed(x, y, button) {
	joystickpressed(0, "a")
}

/**
 * Adds a point to the score.
 */
def addScore() {
	score += 1
	assets["point"].play()
	// Update the highscore.
	if (score > highscore) {
		highscore = score
	}
}

def isMusicPlaying() {
	if (assets["music1"].isPlaying()) {
		return true
	}
	if (assets["music2"].isPlaying()) {
		return true
	}
	if (assets["music3"].isPlaying()) {
		return true
	}
	return false
}

/**
 * Callback; Save the current state as a JSON string.
 */
def savestate() {
	var pipeInfo = []
	for (pipe : pipes) {
		pipeInfo.push_back(pipe.serialize())
	}
	var info = [
		"score": score,
		"highscore": highscore,
		"bird": bird.serialize(),
		"currentState": states.getCurrentName(),
		"pipes": pipeInfo,
		"openingSize": openingSize,
		"openingSizeRange": openingSizeRange,
		"pipetimer": pipetimer,
		"flapTimer": flapTimer,
		"landX": landX,
		"skyX": skyX
	]
	return to_json(info)
}

/**
 * Callback; Load the state from the given JSON string.
 */
def loadstate(data) {
	var info = from_json(data)
	highscore = info["highscore"]
	bird.deserialize(info["bird"])
	states.set(info["currentState"])
	score = info["score"]
	pipes.clear()
	for (pipe : info["pipes"]) {
		pipes.push_back(Pipe(100, pipe["top"], 100).deserialize(pipe))
	}
	openingSize = info["openingSize"]
	openingSizeRange = info["openingSizeRange"]
	pipetimer = info["pipetimer"]
	flapTimer = info["flapTimer"]
	landX = info["landX"]
	skyX = info["skyX"]
	assets["music1"].stop()
	assets["music2"].stop()
	assets["music3"].stop()

	return true
}

def cheatreset() {
	cheatNoClip = false
	cheatFly = false
}

def cheatset(index, enabled, code) {
	if (code == "noclip") {
		cheatNoClip = enabled
	}
	if (code == "fly") {
		cheatFly = enabled
	}
}
