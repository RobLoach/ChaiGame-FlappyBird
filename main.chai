global fontbig
global bird
global assets
global pipes = []
global pipetimer = 0.0f
global pipetimerCountdown = 1.4f
global score = 0
global openingSizeStart = 75.0f
global openingSize = 75.0f
global openingSizeRange = 10.0f
global flapTimer = 0.0f
global flapTimerMax = 0.10f
global landTop = 0
global landX = 0.0f
global skyX = 0.0f
global topX = 0.0f
global highQuality = true

def conf(t) {
	t.window.width = 640;
	t.window.height = 480;
}

def load() {
	graphics.setBackgroundColor(78, 192, 202)
	filesystem.load("Assets.chai")
	filesystem.load("Bird.chai")
	filesystem.load("Pipe.chai")

	assets = Assets()
	assets.get("music").setLooping(true)
	assets.get("music").play()
	fontbig = graphics.newFont("assets/font_bignumbers.png", 24, 36, "0123456789")
	bird = Bird(assets)
	landTop = graphics.getHeight() - assets.get("land").getHeight()

	reset()
}

def reset() {
	pipes.clear()
	addPipe()
	bird.reset()
	score = 0
	openingSize = 75.0f
	openingSizeRange = 10.0f
	pipetimer = 0.0f
	flapTimer = 0.0f
	openingSize = 70.0f
	landX = 0.0f
}

def addPipe() {
	// Find out where the pipes should be positioned.
	var pipeImage := assets.get("pipe-up")
	var opening = math.random(assets.get("top").getHeight() + pipeImage.getHeight() + openingSize, landTop - pipeImage.getHeight() - openingSize)
	var openSize = openingSize + math.random(-openingSizeRange, openingSizeRange)

	// Add the pipes to the game.
	pipes.push_back(Pipe(assets, opening, true, openSize))
	pipes.push_back(Pipe(assets, opening, false, openSize))
}

def draw() {
	if (highQuality) {
		var sky := assets.get("sky")
		for (var i = 0; (i - 1) * sky.getWidth() <= graphics.getWidth(); ++i) {
			graphics.draw(sky, i * sky.getWidth() - skyX, landTop - sky.getHeight())
		}
	}

	var land := assets.get("land")
	if (highQuality) {
		for (var i = 0; (i - 1) * land.getWidth() <= graphics.getWidth(); ++i) {
			graphics.draw(land, i * land.getWidth() - landX, graphics.getHeight() - land.getHeight())
		}
	}
	else {
		graphics.setColor(84, 56, 71)
		var landTop = graphics.getHeight() - land.getHeight() + 2
		graphics.line(0, graphics.getHeight() - land.getHeight(), graphics.getWidth(), graphics.getHeight() - land.getHeight())
		graphics.line(0, graphics.getHeight() - land.getHeight() + 1, graphics.getWidth(), graphics.getHeight() - land.getHeight() + 1)
		graphics.setColor(215, 168, 76)
		graphics.rectangle("fill", 0, landTop, graphics.getWidth(), graphics.getHeight() - landTop)
	}

	var top := assets.get("top")
	if (highQuality) {
		for (var i = 0; (i - 1) * top.getWidth() <= graphics.getWidth(); ++i) {
			graphics.draw(top, i * top.getWidth() - topX, 0)
		}
	}
	else {
		graphics.setColor(84, 56, 71)
		graphics.line(0, top.getHeight() - 2, graphics.getWidth(), top.getHeight() - 2)
		graphics.line(0, top.getHeight() - 1, graphics.getWidth(), top.getHeight() - 1)
		graphics.setColor(192, 112, 0)
		graphics.rectangle("fill", 0, 0, graphics.getWidth(), top.getHeight() - 2)
	}

	// Draw the Bird
	bird.draw()

	// Draw all the pipes
	for (pipe : pipes) {
		pipe.draw()
	}

	// Print the score.
	graphics.setFont(fontbig)
	graphics.print(to_string(score), graphics.getWidth() / 2 - 30, 30)
}

def update(delta) {
	// Update the bird position, resetting if needed.
	if (bird.update(delta) == false) {
		reset()
		return
	}

	// Update all pipes.
	var removePipe = -1
	for (var i = 0; i < pipes.size(); ++i) {

		if (pipes[i].collide(bird)) {
			assets.get("hit").play()
			reset()
			return
		}

		// Update will return false if we are to remove it.
		if (pipes[i].update(delta, bird.speed) == false) {
			removePipe = i
		}

		// Count the score.
		if (bird.x > pipes[i].x + pipes[i].width / 2 && pipes[i].top && pipes[i].scored == false) {
			addScore()
			pipes[i].scored = true
		}
	}

	// See if we are removing an old pipe.
	if (removePipe >= 0) {
		pipes.erase_at(removePipe)
	}

	// Add a new pipe if needed.
	pipetimer += delta
	if (pipetimer > pipetimerCountdown) {
		pipetimer = 0.0f
		addPipe()
	}

	landX += bird.speed * delta
	if (landX >= assets.get("land").getWidth()) {
		landX = 0.0f
	}

	topX += bird.speed * delta
	if (topX >= assets.get("top").getWidth()) {
		topX = 0.0f
	}

	skyX += bird.speed / 2 * delta
	if (skyX >= assets.get("sky").getWidth()) {
		skyX = 0.0f
	}

	flapTimer += delta

	if (highQuality) {
		var fps = timer.getFPS()
		if (fps > 10 && fps < 40) {
			highQuality = false
		}
	}
}

def joystickpressed(joy, button) {
	if (flapTimer > flapTimerMax) {
		bird.flap(false)
		flapTimer = 0.0f
	}
}

def mousepressed(x, y, button) {
	joystickpressed(0, 0)
}

def addScore() {
	score += 1
	assets.get("point").play()
}
